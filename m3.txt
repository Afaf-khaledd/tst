############################4 cong

if(isPageReplacmentAlgorithmFIFO())
		{

			if(wsSize < (curenv->page_WS_max_size))
			{
				//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
				//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
				// Write your code here, remove the panic and write your code
				//panic("page_fault_handler().PLACEMENT is not implemented yet...!!");

				struct FrameInfo *ptrframe;
				allocate_frame(&ptrframe);
				map_frame(curenv->env_page_directory, ptrframe, fault_va,  PERM_USER | PERM_PRESENT | PERM_WRITEABLE);
				int ret = pf_read_env_page(curenv, (void*)(fault_va));
				if(ret == E_PAGE_NOT_EXIST_IN_PF){
					if(!((fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX) || (fault_va >= USTACKBOTTOM && fault_va < USTACKTOP))){
						unmap_frame(curenv->env_page_directory,fault_va);
						cprintf("4");
						sched_kill_env(curenv->env_id);
					}

				}
				struct WorkingSetElement *ptr_element = env_page_ws_list_create_element(curenv,fault_va);
				ptr_element->time_stamp = 0;

				if(curenv->page_last_WS_element != NULL){
					LIST_INSERT_BEFORE(&(curenv->page_WS_list), curenv->page_last_WS_element, ptr_element);
				}
				else{
					LIST_INSERT_TAIL(&(curenv->page_WS_list), ptr_element);
					if (LIST_SIZE(&(curenv->page_WS_list)) == curenv->page_WS_max_size)
					{
						curenv->page_last_WS_element = LIST_FIRST(&(curenv->page_WS_list));
					}
					else
					{
						curenv->page_last_WS_element = NULL;
					}
				}
			}
			else
			{
				//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
				//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
				// Write your code here, remove the panic and write your code
				//panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");

				struct WorkingSetElement *victim = curenv->page_last_WS_element;
				uint32 page_permissions = pt_get_page_permissions(curenv->env_page_directory,victim->virtual_address);
				if((page_permissions & PERM_MODIFIED) == PERM_MODIFIED){
					uint32 *ptr_table = NULL;
					struct FrameInfo *ptrframe=get_frame_info(curenv->env_page_directory,victim->virtual_address,&ptr_table);
					int res = pf_update_env_page(curenv, victim->virtual_address,ptrframe);
					if(res == E_NO_PAGE_FILE_SPACE){
						panic("No Free Pages In Disk..!!");
					}

				}
				env_page_ws_invalidate(curenv, victim->virtual_address);
				uint32 *ptr_table = NULL;
				struct FrameInfo *ptr_disk = get_frame_info(curenv->env_page_directory,victim->virtual_address,&ptr_table);
				map_frame(curenv->env_page_directory, ptr_disk, fault_va,  PERM_USER | PERM_PRESENT | PERM_WRITEABLE);
				unmap_frame(curenv->env_page_directory,victim->virtual_address);
				int ret = pf_read_env_page(curenv, (void*)(fault_va));
				if(ret == E_PAGE_NOT_EXIST_IN_PF){

					if(!((fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX) || (fault_va >= USTACKBOTTOM && fault_va < USTACKTOP))){
						unmap_frame(curenv->env_page_directory,fault_va);
						cprintf("5");
						sched_kill_env(curenv->env_id);
					}

				}
				struct WorkingSetElement *ptr_element = env_page_ws_list_create_element(curenv,fault_va);
				ptr_element->time_stamp = 0;
				if(curenv->page_last_WS_element == NULL){
					LIST_INSERT_TAIL(&(curenv->page_WS_list), ptr_element);
					curenv->page_last_WS_element = LIST_FIRST(&(curenv->page_WS_list));

				}
				else{
					LIST_INSERT_BEFORE(&(curenv->page_WS_list),curenv->page_last_WS_element,ptr_element);
				}
			}
		}
